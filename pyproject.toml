[tool.codespell]
skip = ".git,*.pdf,*.svg"
# the way to make case sensitive skips of words etc
ignore-regex = "\bNd\b"
ignore-words-list = "MapPin"

# The coverage settings in this file only control `coverage report`. `coverage run` and
# `coverage combine` are controlled by the pyproject.toml files in each package's
# subdirectory.
#
# In each subdirectory's pyproject.toml, we use both of the following settings:
#   * `source_pkgs`: detects the given packages no matter where they're imported from.
#   * `source`: detects all files in the given directory, including files that are
#      never imported by the tests.
#
# When running through `tox`, this will produce duplicate entries which must be merged
# with `coverage combine`.

[tool.coverage.run]
plugins = ["coverage_conditional_plugin"]
relative_files = true

[tool.coverage.report]
show_missing = true
skip_covered = true
skip_empty = true
precision = 1
exclude_lines = [
    "pragma: no cover",
    "@(abc\\.)?abstractmethod",
    "NotImplementedError\\(\\)",
    "if TYPE_CHECKING:",
    "class .+?\\(Protocol.*\\):",
    "@overload",
]

[tool.coverage.coverage_conditional_plugin.rules]
# Additional testbed rules are configured in the testbed module
no-cover-if-missing-setuptools_scm = "not is_installed('setuptools_scm')"
no-cover-if-missing-PIL = "not is_installed('PIL')"
no-cover-if-PIL-installed = "is_installed('PIL')"
no-cover-if-lt-py312 = "sys_version_info < (3, 12) and os_environ.get('COVERAGE_EXCLUDE_PYTHON_VERSION') != 'disable'"
no-cover-if-gte-py312 = "sys_version_info > (3, 12) and os_environ.get('COVERAGE_EXCLUDE_PYTHON_VERSION') != 'disable'"
no-cover-if-lt-py311 = "sys_version_info < (3, 11) and os_environ.get('COVERAGE_EXCLUDE_PYTHON_VERSION') != 'disable'"
no-cover-if-gte-py311 = "sys_version_info > (3, 11) and os_environ.get('COVERAGE_EXCLUDE_PYTHON_VERSION') != 'disable'"

[tool.ruff]
exclude = [
    ".template",  # Ruff fails to run at all if allowed to lint the cookiecutter syntax
    "core/src/toga/__init__.pyi"
]

[tool.ruff.lint]
# In addition to the default rules, these additional rules will be used:
extend-select = [
    "E",      # pycodestyle
    "W",      # pycodestyle
    "F",      # pyflakes
    "UP",     # pyupgrade
    "B",      # flake8-bugbear
    "YTT",    # flake8-2020
    "ASYNC",  # flake8-async
    "C4",     # flake8-comprehensions
    "I",      # isort
    # The SIM rules are *very* opinionated, and don't necessarily make for better code.
    # They may be worth occasionally turning on just to see if something could actually
    # use improvement.
    # "SIM",    # flake8-simplify
]

[tool.ruff.lint.isort]
combine-as-imports = true
known-third-party = [
    "android",  # isort defaults to making this first-party because it can't be imported.
    "textual",  # We don't ever import textual, so Ruff doesn't know about it.
    "travertino", # In this repo, but still a separate package
]
known-first-party = [
    "testbed",
    "toga",
    "toga_android",
    "toga_cocoa",
    "toga_dummy",
    "toga_gtk",
    "toga_iOS",
    "toga_textual",
    "toga_web",
    "toga_winforms",
]

[tool.towncrier]
directory = "changes"
package = "toga"
package_dir = "core/src"
filename = "docs/about/releases.rst"
title_format = "{version} ({project_date})"
issue_format = "`#{issue} <https://github.com/beeware/toga/issues/{issue}>`__"
template = "changes/template.rst"
type = [
    { directory = "feature", name = "Features", showcontent = true },
    { directory = "bugfix", name = "Bugfixes", showcontent = true },
    { directory = "removal", name = "Backward Incompatible Changes", showcontent = true },
    { directory = "doc", name = "Documentation", showcontent = true },
    { directory = "misc", name = "Misc", showcontent = false },
]

# [tool.setuptools_scm]
# We're not doing anything Python-related at the root level of the repo, but if this
# declaration isn't here, tox commands run from the root directory raise a warning that
# pyproject.toml doesn't contain a setuptools_scm section.

[dependency-groups]
# Extras used by developers *of* Toga are pinned to specific versions to
# ensure environment consistency.
pre-commit = [
    "pre-commit == 4.3.0",
    ]

town-crier = [
    "towncrier==24.8.0",
]

tox-uv = [
    "tox-uv == 1.28.0",
]

setuptools-scm = [
    "setuptools-scm==9.2.0",
]

dev = [
    "coverage[toml] == 7.10.4",
    "coverage-conditional-plugin == 0.9.0",
    "Pillow == 11.3.0",
    "pytest == 8.4.1",
    "pytest-asyncio == 1.1.0",
    "pytest-freezer == 0.4.9",
    "pytest-xdist == 3.8.0",
    {include-group = "pre-commit"},
    {include-group = "tox-uv"},
    {include-group = "setuptools-scm"},
]
# Docs are always built on a specific Python version; see RTD and tox config files,
# and the docs contribution guide.
docs = [
    "beeware-docs-tools @ git+https://github.com/beeware/beeware-docs-tools",
    "Pillow == 11.3.0",  # Why is this part of the docs?
    "black==25.1.0",
    "markdown-checker==0.2.5",
    "mistletoe==1.4.0",
    "mkdocs-autorefs==1.4.2",
    "mkdocs-include-markdown-plugin==7.1.6",
    "mkdocs-literate-nav==0.6.2",
    "mkdocs-macros-plugin==1.3.9",
    "mkdocs-material==9.6.17",
    "mkdocs-table-reader-plugin==3.1.0",
    "mkdocs==1.6.1",
    "mkdocstrings-python==1.16.12",
    "pymdown-extensions==10.16.1",
    "pyspelling==2.10",
    "python-Levenshtein==0.27.1",
    "PyYAML==6.0.2",
    "toga-core @ ./core",
    "translate-toolkit @ git+https://github.com/translate/translate@aa35159f03f53aa536381643dfafbc2a19a24784",
    "travertino @ ./travertino",
    {include-group = "setuptools-scm"},
]
