name: CI
on:
  pull_request:
  push:
    branches:
      - main
  workflow_call:
    outputs:
      artifact-name:
        description: "Name of the uploaded artifact; use for artifact retrieval."
        value: ${{ jobs.package.outputs.artifact-name }}

env:
  min_python_version: "3.8"
  max_python_version: "3.12"
  FORCE_COLOR: "1"

defaults:
  run:
    shell: bash

# Cancel active CI runs for a PR before starting another run
concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:
  pre-commit:
    name: Pre-commit checks
    uses: beeware/.github/.github/workflows/pre-commit-run.yml@main
    with:
      pre-commit-source: "./core[dev]"

  towncrier:
    name: Check towncrier
    uses: beeware/.github/.github/workflows/towncrier-run.yml@main
    with:
      tox-source: "./core[dev]"

  package:
    name: Python Package
    uses: beeware/.github/.github/workflows/python-package-create.yml@main
    with:
      tox-source: "./core[dev]"
      build-subdirectory: ${{ matrix.subdir }}
      distribution-path: "*/dist/*"
    strategy:
      matrix:
        subdir:
        - "android"
        - "cocoa"
        - "core"
        - "demo"
        - "dummy"
        - "gtk"
        - "iOS"
        - "toga"
        - "textual"
        - "web"
        - "winforms"

  core:
    runs-on: ${{ matrix.platform }}-latest
    needs: [pre-commit, towncrier, package]
    continue-on-error: ${{ matrix.experimental }}
    strategy:
      matrix:
        platform: [ "macos", "ubuntu", "windows" ]
        python-version: [ "3.8", "3.9", "3.10", "3.11", "3.12" ]
        include:
          - experimental: false
          # - python-version: "3.13-dev"
          #   experimental: true
    steps:
    - uses: actions/checkout@v4.1.1
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5.0.0
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dev dependencies
      run: |
        # We don't actually want to install toga-core;
        # we just want the dev extras so we have a known version of tox and coverage
        python -m pip install ./core[dev]
    - name: Get packages
      uses: actions/download-artifact@v4.1.1
      with:
        pattern: ${{ needs.package.outputs.artifact-name }}-*
        merge-multiple: true
    - name: Test
      run: |
        # The $(ls ...) shell expansion is done in the Github environment;
        # the value of TOGA_INSTALL_COMMAND will be a literal string,
        # without any shell expansions to perform
        TOGA_INSTALL_COMMAND="python -m pip install ../$(ls core/dist/toga_core-*.whl)[dev] ../$(ls dummy/dist/toga_dummy-*.whl)" tox -e py
        mv core/.coverage core/.coverage.${{ matrix.platform }}.${{ matrix.python-version }}
    - name: Store coverage data
      uses: actions/upload-artifact@v4.1.0
      with:
        name: core-coverage-data-${{ matrix.platform }}-${{ matrix.python-version }}
        path: "core/.coverage.*"
        if-no-files-found: error

  core-coverage:
    name: Combine & check core coverage.
    runs-on: ubuntu-latest
    needs: core
    steps:
    - uses: actions/checkout@v4.1.1
      with:
        fetch-depth: 0
    - uses: actions/setup-python@v5.0.0
      with:
        # Use latest, so it understands all syntax.
        python-version: ${{ env.max_python_version }}
    - name: Install dev dependencies
      run: |
        # We don't actually want to install toga-core;
        # we just want the dev extras so we have a known version of coverage
        python -m pip install ./core[dev]
    - name: Retrieve coverage data
      uses: actions/download-artifact@v4.1.1
      with:
        pattern: core-coverage-data-*
        path: core
        merge-multiple: true
    - name: Generate coverage report
      run: |
        cd core
        python -m coverage combine
        python -m coverage html --skip-covered --skip-empty
        python -m coverage report --rcfile ../pyproject.toml --fail-under=100
    - name: Upload HTML report if check failed.
      uses: actions/upload-artifact@v4.1.0
      if: failure()
      with:
        name: html-coverage-report
        path: core/htmlcov

  testbed:
    runs-on: ${{ matrix.runs-on }}
    needs: core
    strategy:
      fail-fast: false
      matrix:
        backend: [ "macOS", "windows", "linux", "android", "iOS" ]
        include:
          - pre-command:
            briefcase-run-prefix:
            briefcase-run-args:
            setup-python: true

          - backend: macOS
            runs-on: macos-12
            app-user-data-path: $HOME/Library/Application Support/org.beeware.toga.testbed

          # We use a fixed Ubuntu version rather than `-latest` because at some point,
          # `-latest` will be updated, but it will be a soft changeover, which would cause
          # the system Python version to become inconsistent from run to run.
          - backend: linux
            runs-on: ubuntu-22.04
            # The package list should be the same as in tutorial-0.rst, and the BeeWare
            # tutorial, plus blackbox to provide a window manager. We need a window
            # manager that is reasonably lightweight, honors full screen mode, and
            # treats the window position as the top-left corner of the *window*, not the
            # top-left corner of the window *content*. The default GNOME window managers of
            # most distros meet these requirements, but they're heavyweight; flwm doesn't
            # work either. Blackbox is the lightest WM we've found that works.
            pre-command: |
              sudo apt update -y
              sudo apt install -y blackbox pkg-config python3-dev libgirepository1.0-dev libcairo2-dev gir1.2-webkit2-4.0

              # Start Virtual X server
              echo "Start X server..."
              Xvfb :99 -screen 0 2048x1536x24 &
              sleep 1

              # Start Window manager
              echo "Start window manager..."
              DISPLAY=:99 blackbox &
              sleep 1

            briefcase-run-prefix: 'DISPLAY=:99'
            setup-python: false  # Use the system Python packages.
            app-user-data-path: $HOME/.local/share/testbed

          - backend: windows
            runs-on: windows-latest
            app-user-data-path: $HOME\AppData\Local\Tiberius Yak\Toga Testbed\Data

          - backend: iOS
            runs-on: macos-12
            briefcase-run-args: ' -d "iPhone SE (3rd generation)"'
            app-user-data-path: $(xcrun simctl get_app_container booted org.beeware.toga.testbed data)/Documents

          - backend: android
            runs-on: ubuntu-latest
            briefcase-run-args: " -d '{\"avd\":\"beePhone\",\"skin\":\"pixel_3a\"}' --Xemulator=-no-window --Xemulator=-no-snapshot --Xemulator=-no-audio --Xemulator=-no-boot-anim --shutdown-on-exit"
            pre-command: |
              # check if virtualization is supported...
              sudo apt install -qq --no-install-recommends cpu-checker coreutils && echo "CPUs=$(nproc --all)" && kvm-ok
              # allow access to KVM to run the emulator
              echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' \
                | sudo tee /etc/udev/rules.d/99-kvm4all.rules
              sudo udevadm control --reload-rules
              sudo udevadm trigger --name-match=kvm
    steps:
    - uses: actions/checkout@v4.1.1
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5.0.0
      if: matrix.setup-python
      with:
        # We're not using Python 3.11 yet, because:
        # * The testbed's ProxyEventLoop has some problems with it
        #   (https://github.com/beeware/toga/issues/1982).
        # * It doesn't have an Android build of Pillow yet.
        python-version: "3.10"

    - name: Install dependencies
      run: |
        ${{ matrix.pre-command }}
        # Use the development version of Briefcase
        python -m pip install -U pip
        python -m pip install git+https://github.com/beeware/briefcase.git

    - name: Test App
      working-directory: testbed
      timeout-minutes: 15
      run: ${{ matrix.briefcase-run-prefix }} briefcase run ${{ matrix.backend }} --test ${{ matrix.briefcase-run-args }}

    - name: Upload logs
      uses: actions/upload-artifact@v4.1.0
      if: failure()
      with:
        name: testbed-failure-logs-${{ matrix.backend }}
        path: testbed/logs/*

    - name: Copy app generated user data
      if: failure() && matrix.backend != 'android'
      run: |
        mkdir -p testbed/app_data
        cp -r "${{ matrix.app-user-data-path }}" testbed/app_data/testbed-app_data-${{ matrix.backend }}

    - name: Upload app data
      uses: actions/upload-artifact@v4.1.0
      if: failure() && matrix.backend != 'android'
      with:
        name: testbed-failure-app-data-${{ matrix.backend }}
        path: testbed/app_data/*

    # This step is only needed if you're trying to diagnose test failures that
    # only occur in CI, and can't be reproduced locally. When it runs, it will
    # open an SSH server (URL reported in the logs) so you can ssh into the CI
    # machine.
    # - name: Setup tmate session
    #   uses: mxschmitt/action-tmate@v3
    #   if: failure()
