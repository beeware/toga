name: CI
on:
  pull_request:
  push:
    branches:
      - main
  workflow_call:

env:
  min_python_version: "3.7"
  max_python_version: "3.11"

defaults:
  run:
    shell: bash

jobs:
  pre-commit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4.3.0
        with:
          python-version: ${{ env.min_python_version }}
      - uses: pre-commit/action@v3.0.0

  towncrier:
    runs-on: ubuntu-latest
    steps:
    # Fetch main branch for comparison, then check out current branch.
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
        ref: main
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - uses: actions/setup-python@v4.3.0
      with:
        python-version: ${{ env.python_version }}
    - run: pip install tox
    - run: tox -e towncrier-check

  package:
    strategy:
      matrix:
        subdir: ["android", "cocoa", "core", "demo", "dummy", "gtk", "iOS", "toga",
                 "web", "winforms"]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-python@v4.3.0
      with:
        python-version: ${{ env.min_python_version }}
    - run: pip install tox
    - run: tox -e package -- ${{ matrix.subdir }}
    - uses: actions/upload-artifact@v3
      with:
        name: packages
        # There will only be one dist directory for each matrix sub-job, but using a
        # leading wildcard preserves the directory structure.
        path: "*/dist/*"
        if-no-files-found: error

  core:
    needs: [pre-commit, towncrier, package]
    strategy:
      matrix:
        platform: ['macos', 'ubuntu', 'windows']
        python-version: ["3.7", "3.8", "3.9", "3.10", "3.11", "3.12-dev"]
        include:
          - experimental: false

          - python-version: "3.12-dev"
            experimental: true

    runs-on: ${{ matrix.platform }}-latest
    continue-on-error: ${{ matrix.experimental }}
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4.3.0
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        # See https://github.com/nedbat/coveragepy/issues/991
        python -m pip install tox coverage[toml]~=6.6.0b1
    - name: Get packages
      uses: actions/download-artifact@v3
      with:
        name: packages
    - name: Test
      env:
        TOGA_INSTALL_COMMAND: 'bash -c "pip install ../{core,dummy}/dist/*.whl"'
      run: |
        tox -e py-core
        cd core
        python -m coverage xml
        mv .coverage .coverage.${{ matrix.platform }}.${{ matrix.python-version }}
    - name: Store coverage data
      uses: actions/upload-artifact@v3
      with:
        name: core-coverage-data
        path: "core/.coverage.*"
        if-no-files-found: error
    - name: Upload coverage data to CodeCov
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: core/coverage.xml
        flags: unittests
        fail_ci_if_error: true

  core-coverage:
    name: Combine & check core coverage.
    runs-on: ubuntu-latest
    needs: core
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - uses: actions/setup-python@v4.3.0
      with:
        # Use latest, so it understands all syntax.
        python-version: ${{ env.max_python_version }}
    - name: Install dependencies
      run: |
        # See https://github.com/nedbat/coveragepy/issues/991
        python -m pip install coverage[toml]~=6.6.0b1
    - name: Retrieve coverage data
      uses: actions/download-artifact@v3
      with:
        name: core-coverage-data
        path: core
    - name: Generate coverage report
      run: |
        cd core
        python -m coverage combine
        python -m coverage html --skip-covered --skip-empty
        python -m coverage report --rcfile ../pyproject.toml # --fail-under=100
    - name: Upload HTML report if check failed.
      uses: actions/upload-artifact@v3
      with:
        name: html-coverage-report
        path: core/htmlcov
      if: ${{ failure() }}

  backend:
    needs: core
    strategy:
      matrix:
        backend: [android, cocoa, gtk, iOS, web, winforms]
        include:
          - runs-on: ubuntu-latest
          - python-version: "3.7"  # Should be env.min_python_version (https://github.com/actions/runner/issues/480)
          - pre-command:

          - backend: cocoa
            runs-on: macos-latest

          - backend: gtk
            pre-command: "sudo apt-get update -y && sudo apt-get install -y python3-gi python3-gi-cairo gir1.2-gtk-3.0 python3-dev libgirepository1.0-dev libcairo2-dev pkg-config"

          - backend: iOS
            runs-on: macos-latest

          - backend: winforms
            runs-on: windows-latest
            # Py3.9 is the first Python version for which
            # a wheel of pythonnet isn't available on PyPI.
            python-version: "3.9"
    runs-on: ${{ matrix.runs-on }}
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4.3.0
      with:
        python-version: ${{ matrix.python-version }}
    - name: Get packages
      uses: actions/download-artifact@v3
      with:
        name: packages
    - name: Install dependencies
      run: |
        ${{ matrix.pre-command }}
        python -m pip install tox
    - name: Test
      env:
        TOGA_INSTALL_COMMAND: 'bash -c "pip install ../{core,dummy,${{ matrix.backend }}}/dist/*.whl"'
      run: |
        tox -e py-${{ matrix.backend }}
