# Flake8 doesn't provide a pyproject configuration, but allows tox.ini
[flake8]
max-line-length = 88
extend-ignore =
    # whitespace before :
    # See https://github.com/PyCQA/pycodestyle/issues/373
    E203,

[tox]
envlist = py{39,310,311,312,313}-cov{,-trav},coverage
labels =
    test = py-cov{,-trav},coverage{,-trav}
    test-core = py-cov,coverage
    test-trav = py-cov-trav,coverage-trav
    test39 = py39-cov{,-trav},coverage39{,-trav}
    test310 = py310-cov{,-trav},coverage310{,-trav}
    test311 = py311-cov{,-trav},coverage311{,-trav}
    test312 = py312-cov{,-trav},coverage312{,-trav}
    test313 = py313-cov{,-trav},coverage313{,-trav}
    ci = towncrier-check,docs-lint,pre-commit,py313-cov{,-trav},coverage{,-trav}-fail-platform
skip_missing_interpreters = True

[testenv:pre-commit]
skip_install = True
deps =
    {tox_root}{/}travertino
    {tox_root}{/}core[dev]
commands = pre-commit run --all-files --show-diff-on-failure --color=always

# The leading comma generates the "py" environment
[testenv:py{,39,310,311,312,313}{,-cov}{,-trav}]
depends = pre-commit
changedir =
    !trav: core
    trav: travertino
skip_install = True
setenv =
    TOGA_BACKEND = toga_dummy
allowlist_externals =
    bash
commands =
    # TOGA_INSTALL_COMMAND is set to a bash command by the CI workflow
    {env:TOGA_INSTALL_COMMAND:python -m pip install {tox_root}{/}core[dev] {tox_root}{/}dummy {tox_root}{/}travertino}
    !cov: python -m pytest {posargs:-vv --color yes}
    cov : python -m coverage run -m pytest {posargs:-vv --color yes}

[testenv:coverage{,39,310,311,312,313}{,-trav}{,-html}{,-keep}{,-fail}{,-platform}]
depends =
    !trav: pre-commit,py{,39,310,311,312,313}{,-cov}
    trav: pre-commit,py{,39,310,311,312,313}{,-trav}{,-cov}
changedir =
    !trav: core
    trav: travertino
skip_install = True
# by default, coverage should run on oldest supported Python for testing platform coverage.
# however, coverage for a particular Python version should match the version used for pytest.
base_python =
    coverage39: py39
    coverage310: py310
    coverage311: py311
    coverage312: py312
    coverage313: py313
setenv =
    keep: COMBINE_KEEP = --keep
    fail: REPORT_FAIL_COND = --fail-under=100
    !trav: PACKAGE_RCFILE = --rcfile {tox_root}{/}core{/}pyproject.toml
    trav: PACKAGE_RCFILE = --rcfile {tox_root}{/}travertino{/}pyproject.toml
    PROJECT_RCFILE = --rcfile {tox_root}{/}pyproject.toml
    # disable conditional coverage exclusions for Python version
    {platform}: COVERAGE_EXCLUDE_PYTHON_VERSION=disable
commands_pre = python --version
commands =
    # TOGA_INSTALL_COMMAND is set to a bash command by the CI workflow
    {env:TOGA_INSTALL_COMMAND:python -m pip install {tox_root}{/}core[dev] {tox_root}{/}travertino}
    -python -m coverage combine {env:PACKAGE_RCFILE} {env:COMBINE_KEEP}
    html: python -m coverage html {env:PROJECT_RCFILE} --skip-covered --skip-empty
    python -m coverage report {env:PROJECT_RCFILE} {env:REPORT_FAIL_COND}

[testenv:towncrier{,-check}]
skip_install = True
deps =
    towncrier==24.8.0
commands =
    check  : python -m towncrier.check --compare-with origin/main
    !check : python -m towncrier {posargs}

[docs]
docs_dir = {tox_root}{/}docs
build_dir = {[docs]docs_dir}{/}_build
sphinx_args = --show-traceback --fail-on-warning --keep-going --jobs auto

[testenv:docs{,-lint,-all,-live,-live-src}]
# Docs are always built on Python 3.12. See also the RTD config and contribution docs.
base_python = py312
skip_install = True
# give sphinx-autobuild time to shutdown http server
suicide_timeout = 1
deps =
    # editable install so docstrings can be updated for 'all' and 'live'
    -e {tox_root}{/}core[docs]
    -e {tox_root}{/}travertino
passenv =
    # On macOS M1, you need to manually set the location of the PyEnchant
    # library:
    #     export PYENCHANT_LIBRARY_PATH=/opt/homebrew/lib/libenchant-2.2.dylib
    PYENCHANT_LIBRARY_PATH
commands =
    !lint-!all-!live : python -m sphinx {[docs]sphinx_args} {posargs} --builder html {[docs]docs_dir} {[docs]build_dir}{/}html
    lint : python -m sphinx {[docs]sphinx_args} {posargs} --builder spelling {[docs]docs_dir} {[docs]build_dir}{/}spell
    lint : python -m sphinx {[docs]sphinx_args} {posargs} --builder linkcheck {[docs]docs_dir} {[docs]build_dir}{/}links
    all  : python -m sphinx {[docs]sphinx_args} {posargs} --verbose --write-all --fresh-env --builder html {[docs]docs_dir} {[docs]build_dir}{/}html
    live-!src : sphinx-autobuild {[docs]sphinx_args} {posargs} --builder html {[docs]docs_dir} {[docs]build_dir}{/}live
    live-src  : sphinx-autobuild {[docs]sphinx_args} {posargs} --write-all --fresh-env --watch {tox_root}{/}core{/}src{/}toga --builder html {[docs]docs_dir} {[docs]build_dir}{/}live
